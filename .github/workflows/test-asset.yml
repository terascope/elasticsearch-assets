name: Test Teraslice Asset
run-name: ${{ github.actor }} is testing the Teraslice Asset
on:
  workflow_dispatch:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  check-docker-limit-before:
   uses: terascope/workflows/.github/workflows/check-docker-limit.yml@main
   secrets: inherit

  cache-docker-images:
    needs: check-docker-limit-before
    uses: terascope/workflows/.github/workflows/cache-docker-images.yml@main
    secrets: inherit

  build-elasticsearch-assets:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        # NOTE: Hard Coded Node Version array, should match array in build-and-publish-asset.yml
        node-version: [18, 20, 22]
    steps:
      - uses: actions/checkout@v4

      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'yarn'

      - run: yarn && yarn setup

      - name: Get Commit Short SHA
        id: get-short-sha
        run: |
          calculatedSha=$(git rev-parse --short ${{ github.event.pull_request.head.sha || github.sha }})
          echo "COMMIT_SHORT_SHA=$calculatedSha" >> $GITHUB_OUTPUT

      - name: Append dev tag to version
        run: |
          jq '.version += "-dev.${{ steps.get-short-sha.outputs.COMMIT_SHORT_SHA }}"' asset/asset.json > tempAsset.json && mv tempAsset.json asset/asset.json
          cat asset/asset.json

      - run: yarn dlx teraslice-cli -v
      - run: yarn dlx teraslice-cli assets build
      - run: ls -l build/

      - name: Archive test build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: teraslice-test-asset-${{ matrix.node-version }}-dev.${{ steps.get-short-sha.outputs.COMMIT_SHORT_SHA }}
          path: ./build
          retention-days: 7

  test-elasticsearch-assets:
    runs-on: ubuntu-latest
    needs: cache-docker-images
    env:
      NODE_OPTIONS: "--max-old-space-size=4096"
    strategy:
       # opensearch is finiky, keep testing others if it fails
      fail-fast: false
      matrix:
        # NOTE: Hard Coded Node Version array, should match array in build-and-publish-asset.yml
        node-version: [18, 20, 22]
        search-version: [elasticsearch6, elasticsearch7, opensearch1, opensearch2]
    steps:
      - uses: actions/checkout@v4

      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'yarn'

      # we login to docker to avoid docker pull limit rates
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - run: yarn && yarn setup
      - run: yarn lint

      - name: Create Docker Image List
        run: |
          yarn docker:listImages
          cat ./images/image-list.txt

      - name: Restore Docker image cache
        id: docker-cache
        uses: actions/cache@v4
        with:
          path: /tmp/docker_cache
          key: docker-images-${{ hashFiles('./images/image-list.txt') }}

      - name: Test asset for ${{ matrix.search-version }}
        run: SKIP_IMAGE_DELETION='true' yarn test:${{ matrix.search-version }}

      - name: Test apis for ${{ matrix.search-version }}
        run: yarn test:${{ matrix.search-version }}
        working-directory: ./packages/elasticsearch-asset-apis

  comment-artifact-urls:
    # skip comment on push event (merge to master)
    if: github.event_name != 'push'
    needs: test-elasticsearch-assets
    runs-on: ubuntu-latest
    steps:
      - name: Get Artifacts List
        id: artifacts-list
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          ARTIFACTS_JSON=$(gh api repos/${{ github.repository }}/actions/runs/${{ github.run_id }}/artifacts)
          echo $ARTIFACTS_JSON
          ID_LIST=$(echo "$ARTIFACTS_JSON" | jq -c  '[.artifacts[] | {name: .name, id:.id}]')
          echo $ID_LIST
          echo "artifact-ids=$ID_LIST" >> "$GITHUB_OUTPUT"
          
      - name: Comment on PR
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          PR_NUMBER: ${{ github.event.pull_request.number }}
        run: |
          ARTIFACT_IDS='${{ steps.artifacts-list.outputs.artifact-ids }}'
          LIST=$(echo "$ARTIFACT_IDS" | jq -r '.[] | "\(.name): https://github.com/"${{ github.repository }}"/actions/runs/"${{ github.run_id }}"/artifacts/\(.id)"')
          COMMENT=$(printf "Asset artifacts:\n%s" "$LIST")
          gh api repos/${{ github.repository }}/issues/${PR_NUMBER}/comments -f body="$COMMENT"

  check-docker-limit-after:
    needs: test-elasticsearch-assets
    uses: terascope/workflows/.github/workflows/check-docker-limit.yml@main
    secrets: inherit

# TODO:
# - Add Macos Test
# - Add post test build verify for all supported node versions, no Opensearch/ES

  # test-macos:
  #   runs-on: macos-latest
  #   steps:
  #     - uses: actions/checkout@v3
  #     - name: Use Node.js
  #       uses: actions/setup-node@v3
  #       with:
  #         # NOTE: Hard Coded Node Version
  #         node-version: '18.18.2'
  #     - run: yarn setup
  #     - run: yarn lint
  #     # TODO: Ideally we'd be able to at least run unit tests that don't require docker.
  #     #- run: yarn test:all
  #     - run: yarn global add teraslice-cli
  #     - run: teraslice-cli -v
  #     - run: teraslice-cli assets build
  #     - run: ls -l build/
